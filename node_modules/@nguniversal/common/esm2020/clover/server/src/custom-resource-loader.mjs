/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { promises } from 'fs';
import { ResourceLoader } from 'jsdom';
import { normalize } from 'path';
export class CustomResourceLoader extends ResourceLoader {
    constructor(baseUrl, publicPath, fileCache) {
        super();
        this.baseUrl = baseUrl;
        this.publicPath = publicPath;
        this.fileCache = fileCache;
    }
    fetch(url, _options) {
        if (!url.endsWith('.js') || !url.startsWith(this.baseUrl)) {
            return null;
        }
        const path = normalize(url.replace(this.baseUrl, this.publicPath));
        if (this.fileCache.has(path)) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const filePromise = Promise.resolve(this.fileCache.get(path));
            filePromise.abort = () => undefined;
            return filePromise;
        }
        const promise = promises.readFile(path, 'utf-8').then((content) => {
            if (path.includes('runtime.')) {
                // JSDOM doesn't support type=module, which will be added to lazy loaded scripts.
                // https://github.com/jsdom/jsdom/issues/2475
                content = content.replace(/\.type\s?=\s?['"]module["']/, '');
            }
            this.fileCache.set(path, Buffer.from(content));
            return content;
        });
        promise.abort = () => undefined;
        return promise;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLXJlc291cmNlLWxvYWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL21vZHVsZXMvY29tbW9uL2Nsb3Zlci9zZXJ2ZXIvc3JjL2N1c3RvbS1yZXNvdXJjZS1sb2FkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLElBQUksQ0FBQztBQUM5QixPQUFPLEVBQWtDLGNBQWMsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUN2RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRWpDLE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxjQUFjO0lBQ3RELFlBQ21CLE9BQWUsRUFDZixVQUFrQixFQUNsQixTQUE4QjtRQUUvQyxLQUFLLEVBQUUsQ0FBQztRQUpTLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFDZixlQUFVLEdBQVYsVUFBVSxDQUFRO1FBQ2xCLGNBQVMsR0FBVCxTQUFTLENBQXFCO0lBR2pELENBQUM7SUFFRCxLQUFLLENBQUMsR0FBVyxFQUFFLFFBQXNCO1FBQ3ZDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDekQsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDbkUsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM1QixvRUFBb0U7WUFDcEUsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUUsQ0FBNkIsQ0FBQztZQUMzRixXQUFXLENBQUMsS0FBSyxHQUFHLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQztZQUVwQyxPQUFPLFdBQVcsQ0FBQztTQUNwQjtRQUVELE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ2hFLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBRTtnQkFDN0IsaUZBQWlGO2dCQUNqRiw2Q0FBNkM7Z0JBQzdDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLDZCQUE2QixFQUFFLEVBQUUsQ0FBQyxDQUFDO2FBQzlEO1lBRUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUUvQyxPQUFPLE9BQU8sQ0FBQztRQUNqQixDQUFDLENBQTZCLENBQUM7UUFFL0IsT0FBTyxDQUFDLEtBQUssR0FBRyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUM7UUFFaEMsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7IHByb21pc2VzIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHsgQWJvcnRhYmxlUHJvbWlzZSwgRmV0Y2hPcHRpb25zLCBSZXNvdXJjZUxvYWRlciB9IGZyb20gJ2pzZG9tJztcbmltcG9ydCB7IG5vcm1hbGl6ZSB9IGZyb20gJ3BhdGgnO1xuXG5leHBvcnQgY2xhc3MgQ3VzdG9tUmVzb3VyY2VMb2FkZXIgZXh0ZW5kcyBSZXNvdXJjZUxvYWRlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgYmFzZVVybDogc3RyaW5nLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHVibGljUGF0aDogc3RyaW5nLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZmlsZUNhY2hlOiBNYXA8c3RyaW5nLCBCdWZmZXI+LFxuICApIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgZmV0Y2godXJsOiBzdHJpbmcsIF9vcHRpb25zOiBGZXRjaE9wdGlvbnMpOiBBYm9ydGFibGVQcm9taXNlPEJ1ZmZlcj4gfCBudWxsIHtcbiAgICBpZiAoIXVybC5lbmRzV2l0aCgnLmpzJykgfHwgIXVybC5zdGFydHNXaXRoKHRoaXMuYmFzZVVybCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHBhdGggPSBub3JtYWxpemUodXJsLnJlcGxhY2UodGhpcy5iYXNlVXJsLCB0aGlzLnB1YmxpY1BhdGgpKTtcbiAgICBpZiAodGhpcy5maWxlQ2FjaGUuaGFzKHBhdGgpKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgY29uc3QgZmlsZVByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodGhpcy5maWxlQ2FjaGUuZ2V0KHBhdGgpISkgYXMgQWJvcnRhYmxlUHJvbWlzZTxCdWZmZXI+O1xuICAgICAgZmlsZVByb21pc2UuYWJvcnQgPSAoKSA9PiB1bmRlZmluZWQ7XG5cbiAgICAgIHJldHVybiBmaWxlUHJvbWlzZTtcbiAgICB9XG5cbiAgICBjb25zdCBwcm9taXNlID0gcHJvbWlzZXMucmVhZEZpbGUocGF0aCwgJ3V0Zi04JykudGhlbigoY29udGVudCkgPT4ge1xuICAgICAgaWYgKHBhdGguaW5jbHVkZXMoJ3J1bnRpbWUuJykpIHtcbiAgICAgICAgLy8gSlNET00gZG9lc24ndCBzdXBwb3J0IHR5cGU9bW9kdWxlLCB3aGljaCB3aWxsIGJlIGFkZGVkIHRvIGxhenkgbG9hZGVkIHNjcmlwdHMuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qc2RvbS9qc2RvbS9pc3N1ZXMvMjQ3NVxuICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKC9cXC50eXBlXFxzPz1cXHM/WydcIl1tb2R1bGVbXCInXS8sICcnKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5maWxlQ2FjaGUuc2V0KHBhdGgsIEJ1ZmZlci5mcm9tKGNvbnRlbnQpKTtcblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkgYXMgQWJvcnRhYmxlUHJvbWlzZTxCdWZmZXI+O1xuXG4gICAgcHJvbWlzZS5hYm9ydCA9ICgpID0+IHVuZGVmaW5lZDtcblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG59XG4iXX0=