/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { DOCUMENT, ɵPLATFORM_SERVER_ID as PLATFORM_SERVER_ID } from '@angular/common';
import { APP_ID, ApplicationRef, Inject, NgModule, Optional, PLATFORM_ID, } from '@angular/core';
import { BrowserModule, ɵDomSharedStylesHost as DomSharedStylesHost, ɵSharedStylesHost as SharedStylesHost, TransferState, ɵescapeHtml as escapeHtml, } from '@angular/platform-browser';
import { filter, mapTo, take } from 'rxjs/operators';
import { SSRStylesHost } from './styles_host';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
export class RendererModule {
    constructor(applicationRef, transferState, appId) {
        this.applicationRef = applicationRef;
        this.transferState = transferState;
        this.appId = appId;
        if (typeof ngRenderMode !== 'undefined' && ngRenderMode) {
            ngRenderMode = {
                getSerializedState: () => this.transferState ? escapeHtml(this.transferState.toJson()) : undefined,
                appId: this.appId,
                getWhenStable: () => this.applicationRef.isStable
                    .pipe(filter((isStable) => isStable), take(1), mapTo(undefined))
                    .toPromise(),
            };
        }
    }
    static forRoot() {
        return {
            ngModule: RendererModule,
            providers: [
                ...(typeof ngRenderMode !== 'undefined' && ngRenderMode
                    ? [
                        { provide: PLATFORM_ID, useValue: PLATFORM_SERVER_ID },
                        { provide: SSRStylesHost, useClass: SSRStylesHost, deps: [DOCUMENT, APP_ID] },
                    ]
                    : [{ provide: SSRStylesHost, useClass: SSRStylesHost, deps: [DOCUMENT] }]),
                { provide: SharedStylesHost, useExisting: SSRStylesHost },
                { provide: DomSharedStylesHost, useClass: SSRStylesHost },
            ],
        };
    }
}
RendererModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: RendererModule, deps: [{ token: i0.ApplicationRef }, { token: i1.TransferState, optional: true }, { token: APP_ID, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });
RendererModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: RendererModule, exports: [BrowserModule] });
RendererModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: RendererModule, providers: [], imports: [[], BrowserModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: RendererModule, decorators: [{
            type: NgModule,
            args: [{
                    exports: [BrowserModule],
                    imports: [],
                    providers: [],
                }]
        }], ctorParameters: function () { return [{ type: i0.ApplicationRef }, { type: i1.TransferState, decorators: [{
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [APP_ID]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9jb21tb24vY2xvdmVyL3NyYy9tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFFLFFBQVEsRUFBRSxtQkFBbUIsSUFBSSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3RGLE9BQU8sRUFDTCxNQUFNLEVBQ04sY0FBYyxFQUNkLE1BQU0sRUFFTixRQUFRLEVBQ1IsUUFBUSxFQUNSLFdBQVcsR0FDWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQ0wsYUFBYSxFQUNiLG9CQUFvQixJQUFJLG1CQUFtQixFQUMzQyxpQkFBaUIsSUFBSSxnQkFBZ0IsRUFDckMsYUFBYSxFQUNiLFdBQVcsSUFBSSxVQUFVLEdBQzFCLE1BQU0sMkJBQTJCLENBQUM7QUFDbkMsT0FBTyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBZ0I5QyxNQUFNLE9BQU8sY0FBYztJQUN6QixZQUNVLGNBQThCLEVBQ2xCLGFBQTZCLEVBQ2IsS0FBYztRQUYxQyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDbEIsa0JBQWEsR0FBYixhQUFhLENBQWdCO1FBQ2IsVUFBSyxHQUFMLEtBQUssQ0FBUztRQUVsRCxJQUFJLE9BQU8sWUFBWSxLQUFLLFdBQVcsSUFBSSxZQUFZLEVBQUU7WUFDdkQsWUFBWSxHQUFHO2dCQUNiLGtCQUFrQixFQUFFLEdBQUcsRUFBRSxDQUN2QixJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTO2dCQUMxRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7Z0JBQ2pCLGFBQWEsRUFBRSxHQUFHLEVBQUUsQ0FDbEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRO3FCQUN6QixJQUFJLENBQ0gsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFDOUIsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNQLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FDakI7cUJBQ0EsU0FBUyxFQUFFO2FBQ2pCLENBQUM7U0FDSDtJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsT0FBTztRQUNaLE9BQU87WUFDTCxRQUFRLEVBQUUsY0FBYztZQUN4QixTQUFTLEVBQUU7Z0JBQ1QsR0FBRyxDQUFDLE9BQU8sWUFBWSxLQUFLLFdBQVcsSUFBSSxZQUFZO29CQUNyRCxDQUFDLENBQUM7d0JBQ0UsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxrQkFBa0IsRUFBRTt3QkFDdEQsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO3FCQUM5RTtvQkFDSCxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQzVFLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUU7Z0JBQ3pELEVBQUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUU7YUFDMUQ7U0FDRixDQUFDO0lBQ0osQ0FBQzs7MkdBckNVLGNBQWMsNkZBSUgsTUFBTTs0R0FKakIsY0FBYyxZQUpmLGFBQWE7NEdBSVosY0FBYyxhQUZkLEVBQUUsWUFESixFQUFFLEVBREQsYUFBYTsyRkFJWixjQUFjO2tCQUwxQixRQUFRO21CQUFDO29CQUNSLE9BQU8sRUFBRSxDQUFDLGFBQWEsQ0FBQztvQkFDeEIsT0FBTyxFQUFFLEVBQUU7b0JBQ1gsU0FBUyxFQUFFLEVBQUU7aUJBQ2Q7OzBCQUlJLFFBQVE7OzBCQUNSLFFBQVE7OzBCQUFJLE1BQU07MkJBQUMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgeyBET0NVTUVOVCwgybVQTEFURk9STV9TRVJWRVJfSUQgYXMgUExBVEZPUk1fU0VSVkVSX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7XG4gIEFQUF9JRCxcbiAgQXBwbGljYXRpb25SZWYsXG4gIEluamVjdCxcbiAgTW9kdWxlV2l0aFByb3ZpZGVycyxcbiAgTmdNb2R1bGUsXG4gIE9wdGlvbmFsLFxuICBQTEFURk9STV9JRCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBCcm93c2VyTW9kdWxlLFxuICDJtURvbVNoYXJlZFN0eWxlc0hvc3QgYXMgRG9tU2hhcmVkU3R5bGVzSG9zdCxcbiAgybVTaGFyZWRTdHlsZXNIb3N0IGFzIFNoYXJlZFN0eWxlc0hvc3QsXG4gIFRyYW5zZmVyU3RhdGUsXG4gIMm1ZXNjYXBlSHRtbCBhcyBlc2NhcGVIdG1sLFxufSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IGZpbHRlciwgbWFwVG8sIHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBTU1JTdHlsZXNIb3N0IH0gZnJvbSAnLi9zdHlsZXNfaG9zdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTkdSZW5kZXJNb2RlQVBJIHtcbiAgZ2V0U2VyaWFsaXplZFN0YXRlOiAoKSA9PiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIGdldFdoZW5TdGFibGU6ICgpID0+IFByb21pc2U8dm9pZD47XG4gIGFwcElkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBOR1JlbmRlck1vZGUgPSBib29sZWFuIHwgdW5kZWZpbmVkIHwgTkdSZW5kZXJNb2RlQVBJO1xuZGVjbGFyZSBsZXQgbmdSZW5kZXJNb2RlOiBOR1JlbmRlck1vZGU7XG5cbkBOZ01vZHVsZSh7XG4gIGV4cG9ydHM6IFtCcm93c2VyTW9kdWxlXSxcbiAgaW1wb3J0czogW10sXG4gIHByb3ZpZGVyczogW10sXG59KVxuZXhwb3J0IGNsYXNzIFJlbmRlcmVyTW9kdWxlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhcHBsaWNhdGlvblJlZjogQXBwbGljYXRpb25SZWYsXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSB0cmFuc2ZlclN0YXRlPzogVHJhbnNmZXJTdGF0ZSxcbiAgICBAT3B0aW9uYWwoKSBASW5qZWN0KEFQUF9JRCkgcHJpdmF0ZSBhcHBJZD86IHN0cmluZyxcbiAgKSB7XG4gICAgaWYgKHR5cGVvZiBuZ1JlbmRlck1vZGUgIT09ICd1bmRlZmluZWQnICYmIG5nUmVuZGVyTW9kZSkge1xuICAgICAgbmdSZW5kZXJNb2RlID0ge1xuICAgICAgICBnZXRTZXJpYWxpemVkU3RhdGU6ICgpID0+XG4gICAgICAgICAgdGhpcy50cmFuc2ZlclN0YXRlID8gZXNjYXBlSHRtbCh0aGlzLnRyYW5zZmVyU3RhdGUudG9Kc29uKCkpIDogdW5kZWZpbmVkLFxuICAgICAgICBhcHBJZDogdGhpcy5hcHBJZCxcbiAgICAgICAgZ2V0V2hlblN0YWJsZTogKCkgPT5cbiAgICAgICAgICB0aGlzLmFwcGxpY2F0aW9uUmVmLmlzU3RhYmxlXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgZmlsdGVyKChpc1N0YWJsZSkgPT4gaXNTdGFibGUpLFxuICAgICAgICAgICAgICB0YWtlKDEpLFxuICAgICAgICAgICAgICBtYXBUbyh1bmRlZmluZWQpLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLnRvUHJvbWlzZSgpLFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPFJlbmRlcmVyTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBSZW5kZXJlck1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAuLi4odHlwZW9mIG5nUmVuZGVyTW9kZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbmdSZW5kZXJNb2RlXG4gICAgICAgICAgPyBbXG4gICAgICAgICAgICAgIHsgcHJvdmlkZTogUExBVEZPUk1fSUQsIHVzZVZhbHVlOiBQTEFURk9STV9TRVJWRVJfSUQgfSxcbiAgICAgICAgICAgICAgeyBwcm92aWRlOiBTU1JTdHlsZXNIb3N0LCB1c2VDbGFzczogU1NSU3R5bGVzSG9zdCwgZGVwczogW0RPQ1VNRU5ULCBBUFBfSURdIH0sXG4gICAgICAgICAgICBdXG4gICAgICAgICAgOiBbeyBwcm92aWRlOiBTU1JTdHlsZXNIb3N0LCB1c2VDbGFzczogU1NSU3R5bGVzSG9zdCwgZGVwczogW0RPQ1VNRU5UXSB9XSksXG4gICAgICAgIHsgcHJvdmlkZTogU2hhcmVkU3R5bGVzSG9zdCwgdXNlRXhpc3Rpbmc6IFNTUlN0eWxlc0hvc3QgfSxcbiAgICAgICAgeyBwcm92aWRlOiBEb21TaGFyZWRTdHlsZXNIb3N0LCB1c2VDbGFzczogU1NSU3R5bGVzSG9zdCB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9XG59XG4iXX0=