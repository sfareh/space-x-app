/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { CommonEngine } from '@nguniversal/common/engine';
import { REQUEST, RESPONSE } from '@nguniversal/express-engine/tokens';
/**
 * This is an express engine for handling Angular Applications
 */
export function ngExpressEngine(setupOptions) {
    const engine = new CommonEngine(setupOptions.bootstrap, setupOptions.providers);
    return function (filePath, options, callback) {
        try {
            const renderOptions = { ...options };
            if (!setupOptions.bootstrap && !renderOptions.bootstrap) {
                throw new Error('You must pass in a NgModule to be bootstrapped');
            }
            const req = renderOptions.req;
            const res = renderOptions.res || req.res;
            renderOptions.url =
                renderOptions.url || `${req.protocol}://${req.get('host') || ''}${req.originalUrl}`;
            renderOptions.documentFilePath = renderOptions.documentFilePath || filePath;
            renderOptions.providers = [...(renderOptions.providers || []), getReqResProviders(req, res)];
            // eslint-disable-next-line @typescript-eslint/no-unused-expressions
            (renderOptions.publicPath =
                renderOptions.publicPath ?? setupOptions.publicPath ?? options.settings?.views),
                (renderOptions.inlineCriticalCss =
                    renderOptions.inlineCriticalCss ?? setupOptions.inlineCriticalCss);
            engine
                .render(renderOptions)
                .then((html) => callback(null, html))
                .catch(callback);
        }
        catch (err) {
            callback(err);
        }
    };
}
/**
 * Get providers of the request and response
 */
function getReqResProviders(req, res) {
    const providers = [
        {
            provide: REQUEST,
            useValue: req,
        },
    ];
    if (res) {
        providers.push({
            provide: RESPONSE,
            useValue: res,
        });
    }
    return providers;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL21vZHVsZXMvZXhwcmVzcy1lbmdpbmUvc3JjL21haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBR0gsT0FBTyxFQUFFLFlBQVksRUFBd0MsTUFBTSw0QkFBNEIsQ0FBQztBQUNoRyxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBbUJ2RTs7R0FFRztBQUNILE1BQU0sVUFBVSxlQUFlLENBQUMsWUFBc0M7SUFDcEUsTUFBTSxNQUFNLEdBQUcsSUFBSSxZQUFZLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFaEYsT0FBTyxVQUNMLFFBQWdCLEVBQ2hCLE9BQWUsRUFDZixRQUFxRDtRQUVyRCxJQUFJO1lBQ0YsTUFBTSxhQUFhLEdBQUcsRUFBRSxHQUFHLE9BQU8sRUFBbUIsQ0FBQztZQUN0RCxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUU7Z0JBQ3ZELE1BQU0sSUFBSSxLQUFLLENBQUMsZ0RBQWdELENBQUMsQ0FBQzthQUNuRTtZQUVELE1BQU0sR0FBRyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUM7WUFDOUIsTUFBTSxHQUFHLEdBQUcsYUFBYSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDO1lBRXpDLGFBQWEsQ0FBQyxHQUFHO2dCQUNmLGFBQWEsQ0FBQyxHQUFHLElBQUksR0FBRyxHQUFHLENBQUMsUUFBUSxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUN0RixhQUFhLENBQUMsZ0JBQWdCLEdBQUcsYUFBYSxDQUFDLGdCQUFnQixJQUFJLFFBQVEsQ0FBQztZQUM1RSxhQUFhLENBQUMsU0FBUyxHQUFHLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLEVBQUUsa0JBQWtCLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDN0Ysb0VBQW9FO1lBQ3BFLENBQUMsYUFBYSxDQUFDLFVBQVU7Z0JBQ3ZCLGFBQWEsQ0FBQyxVQUFVLElBQUksWUFBWSxDQUFDLFVBQVUsSUFBSyxPQUFlLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQztnQkFDeEYsQ0FBQyxhQUFhLENBQUMsaUJBQWlCO29CQUM5QixhQUFhLENBQUMsaUJBQWlCLElBQUksWUFBWSxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFFdkUsTUFBTTtpQkFDSCxNQUFNLENBQUMsYUFBYSxDQUFDO2lCQUNyQixJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7aUJBQ3BDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNwQjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2Y7SUFDSCxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxTQUFTLGtCQUFrQixDQUFDLEdBQVksRUFBRSxHQUFjO0lBQ3RELE1BQU0sU0FBUyxHQUFxQjtRQUNsQztZQUNFLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLFFBQVEsRUFBRSxHQUFHO1NBQ2Q7S0FDRixDQUFDO0lBQ0YsSUFBSSxHQUFHLEVBQUU7UUFDUCxTQUFTLENBQUMsSUFBSSxDQUFDO1lBQ2IsT0FBTyxFQUFFLFFBQVE7WUFDakIsUUFBUSxFQUFFLEdBQUc7U0FDZCxDQUFDLENBQUM7S0FDSjtJQUVELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHsgU3RhdGljUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbkVuZ2luZSwgUmVuZGVyT3B0aW9ucyBhcyBDb21tb25SZW5kZXJPcHRpb25zIH0gZnJvbSAnQG5ndW5pdmVyc2FsL2NvbW1vbi9lbmdpbmUnO1xuaW1wb3J0IHsgUkVRVUVTVCwgUkVTUE9OU0UgfSBmcm9tICdAbmd1bml2ZXJzYWwvZXhwcmVzcy1lbmdpbmUvdG9rZW5zJztcbmltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5cbi8qKlxuICogVGhlc2UgYXJlIHRoZSBhbGxvd2VkIG9wdGlvbnMgZm9yIHRoZSBlbmdpbmVcbiAqL1xuZXhwb3J0IHR5cGUgTmdTZXR1cE9wdGlvbnMgPSBQaWNrPFxuICBDb21tb25SZW5kZXJPcHRpb25zLFxuICAnYm9vdHN0cmFwJyB8ICdwcm92aWRlcnMnIHwgJ3B1YmxpY1BhdGgnIHwgJ2lubGluZUNyaXRpY2FsQ3NzJ1xuPjtcblxuLyoqXG4gKiBUaGVzZSBhcmUgdGhlIGFsbG93ZWQgb3B0aW9ucyBmb3IgdGhlIHJlbmRlclxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlbmRlck9wdGlvbnMgZXh0ZW5kcyBDb21tb25SZW5kZXJPcHRpb25zIHtcbiAgcmVxOiBSZXF1ZXN0O1xuICByZXM/OiBSZXNwb25zZTtcbn1cblxuLyoqXG4gKiBUaGlzIGlzIGFuIGV4cHJlc3MgZW5naW5lIGZvciBoYW5kbGluZyBBbmd1bGFyIEFwcGxpY2F0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gbmdFeHByZXNzRW5naW5lKHNldHVwT3B0aW9uczogUmVhZG9ubHk8TmdTZXR1cE9wdGlvbnM+KSB7XG4gIGNvbnN0IGVuZ2luZSA9IG5ldyBDb21tb25FbmdpbmUoc2V0dXBPcHRpb25zLmJvb3RzdHJhcCwgc2V0dXBPcHRpb25zLnByb3ZpZGVycyk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChcbiAgICBmaWxlUGF0aDogc3RyaW5nLFxuICAgIG9wdGlvbnM6IG9iamVjdCxcbiAgICBjYWxsYmFjazogKGVycj86IEVycm9yIHwgbnVsbCwgaHRtbD86IHN0cmluZykgPT4gdm9pZCxcbiAgKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlbmRlck9wdGlvbnMgPSB7IC4uLm9wdGlvbnMgfSBhcyBSZW5kZXJPcHRpb25zO1xuICAgICAgaWYgKCFzZXR1cE9wdGlvbnMuYm9vdHN0cmFwICYmICFyZW5kZXJPcHRpb25zLmJvb3RzdHJhcCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtdXN0IHBhc3MgaW4gYSBOZ01vZHVsZSB0byBiZSBib290c3RyYXBwZWQnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVxID0gcmVuZGVyT3B0aW9ucy5yZXE7XG4gICAgICBjb25zdCByZXMgPSByZW5kZXJPcHRpb25zLnJlcyB8fCByZXEucmVzO1xuXG4gICAgICByZW5kZXJPcHRpb25zLnVybCA9XG4gICAgICAgIHJlbmRlck9wdGlvbnMudXJsIHx8IGAke3JlcS5wcm90b2NvbH06Ly8ke3JlcS5nZXQoJ2hvc3QnKSB8fCAnJ30ke3JlcS5vcmlnaW5hbFVybH1gO1xuICAgICAgcmVuZGVyT3B0aW9ucy5kb2N1bWVudEZpbGVQYXRoID0gcmVuZGVyT3B0aW9ucy5kb2N1bWVudEZpbGVQYXRoIHx8IGZpbGVQYXRoO1xuICAgICAgcmVuZGVyT3B0aW9ucy5wcm92aWRlcnMgPSBbLi4uKHJlbmRlck9wdGlvbnMucHJvdmlkZXJzIHx8IFtdKSwgZ2V0UmVxUmVzUHJvdmlkZXJzKHJlcSwgcmVzKV07XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC1leHByZXNzaW9uc1xuICAgICAgKHJlbmRlck9wdGlvbnMucHVibGljUGF0aCA9XG4gICAgICAgIHJlbmRlck9wdGlvbnMucHVibGljUGF0aCA/PyBzZXR1cE9wdGlvbnMucHVibGljUGF0aCA/PyAob3B0aW9ucyBhcyBhbnkpLnNldHRpbmdzPy52aWV3cyksXG4gICAgICAgIChyZW5kZXJPcHRpb25zLmlubGluZUNyaXRpY2FsQ3NzID1cbiAgICAgICAgICByZW5kZXJPcHRpb25zLmlubGluZUNyaXRpY2FsQ3NzID8/IHNldHVwT3B0aW9ucy5pbmxpbmVDcml0aWNhbENzcyk7XG5cbiAgICAgIGVuZ2luZVxuICAgICAgICAucmVuZGVyKHJlbmRlck9wdGlvbnMpXG4gICAgICAgIC50aGVuKChodG1sKSA9PiBjYWxsYmFjayhudWxsLCBodG1sKSlcbiAgICAgICAgLmNhdGNoKGNhbGxiYWNrKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIEdldCBwcm92aWRlcnMgb2YgdGhlIHJlcXVlc3QgYW5kIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGdldFJlcVJlc1Byb3ZpZGVycyhyZXE6IFJlcXVlc3QsIHJlcz86IFJlc3BvbnNlKTogU3RhdGljUHJvdmlkZXJbXSB7XG4gIGNvbnN0IHByb3ZpZGVyczogU3RhdGljUHJvdmlkZXJbXSA9IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBSRVFVRVNULFxuICAgICAgdXNlVmFsdWU6IHJlcSxcbiAgICB9LFxuICBdO1xuICBpZiAocmVzKSB7XG4gICAgcHJvdmlkZXJzLnB1c2goe1xuICAgICAgcHJvdmlkZTogUkVTUE9OU0UsXG4gICAgICB1c2VWYWx1ZTogcmVzLFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHByb3ZpZGVycztcbn1cbiJdfQ==