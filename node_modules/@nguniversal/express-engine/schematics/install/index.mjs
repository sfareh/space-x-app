/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { dirname, join, normalize, strings } from '@angular-devkit/core';
import { SchematicsException, apply, chain, externalSchematic, mergeWith, move, noop, template, url, } from '@angular-devkit/schematics';
import { NodePackageInstallTask } from '@angular-devkit/schematics/tasks';
import { NodeDependencyType, addPackageJsonDependency, } from '@schematics/angular/utility/dependencies';
import { JSONFile } from '@schematics/angular/utility/json-file';
import { updateWorkspace } from '@schematics/angular/utility/workspace';
import * as ts from 'typescript';
import { addInitialNavigation, findImport, getImportOfIdentifier, getOutputPath, getProject, stripTsExtension, } from '../utils';
const SERVE_SSR_TARGET_NAME = 'serve-ssr';
const PRERENDER_TARGET_NAME = 'prerender';
function addScriptsRule(options) {
    return (host) => __awaiter(this, void 0, void 0, function* () {
        const pkgPath = '/package.json';
        const buffer = host.read(pkgPath);
        if (buffer === null) {
            throw new SchematicsException('Could not find package.json');
        }
        const serverDist = yield getOutputPath(host, options.project, 'server');
        const pkg = JSON.parse(buffer.toString());
        pkg.scripts = Object.assign(Object.assign({}, pkg.scripts), { 'dev:ssr': `ng run ${options.project}:${SERVE_SSR_TARGET_NAME}`, 'serve:ssr': `node ${serverDist}/main.js`, 'build:ssr': `ng build && ng run ${options.project}:server`, 'prerender': `ng run ${options.project}:${PRERENDER_TARGET_NAME}` });
        host.overwrite(pkgPath, JSON.stringify(pkg, null, 2));
    });
}
function updateWorkspaceConfigRule(options) {
    return () => {
        return updateWorkspace((workspace) => {
            const projectName = options.project;
            const project = workspace.projects.get(projectName);
            if (!project) {
                return;
            }
            const serverTarget = project.targets.get('server');
            serverTarget.options.main = join(normalize(project.root), stripTsExtension(options.serverFileName) + '.ts');
            const serveSSRTarget = project.targets.get(SERVE_SSR_TARGET_NAME);
            if (serveSSRTarget) {
                return;
            }
            project.targets.add({
                name: SERVE_SSR_TARGET_NAME,
                builder: '@nguniversal/builders:ssr-dev-server',
                defaultConfiguration: 'development',
                options: {},
                configurations: {
                    development: {
                        browserTarget: `${projectName}:build:development`,
                        serverTarget: `${projectName}:server:development`,
                    },
                    production: {
                        browserTarget: `${projectName}:build:production`,
                        serverTarget: `${projectName}:server:production`,
                    },
                },
            });
            const prerenderTarget = project.targets.get(PRERENDER_TARGET_NAME);
            if (prerenderTarget) {
                return;
            }
            project.targets.add({
                name: PRERENDER_TARGET_NAME,
                builder: '@nguniversal/builders:prerender',
                defaultConfiguration: 'production',
                options: {
                    routes: ['/'],
                },
                configurations: {
                    production: {
                        browserTarget: `${projectName}:build:production`,
                        serverTarget: `${projectName}:server:production`,
                    },
                    development: {
                        browserTarget: `${projectName}:build:development`,
                        serverTarget: `${projectName}:server:development`,
                    },
                },
            });
        });
    };
}
function updateServerTsConfigRule(options) {
    return (host) => __awaiter(this, void 0, void 0, function* () {
        const project = yield getProject(host, options.project);
        const serverTarget = project.targets.get('server');
        if (!serverTarget || !serverTarget.options) {
            return;
        }
        const tsConfigPath = serverTarget.options.tsConfig;
        if (!tsConfigPath || typeof tsConfigPath !== 'string') {
            // No tsconfig path
            return;
        }
        const tsConfig = new JSONFile(host, tsConfigPath);
        const filesAstNode = tsConfig.get(['files']);
        const serverFilePath = stripTsExtension(options.serverFileName) + '.ts';
        if (Array.isArray(filesAstNode) && !filesAstNode.some(({ text }) => text === serverFilePath)) {
            tsConfig.modify(['files'], [...filesAstNode, serverFilePath]);
        }
    });
}
function routingInitialNavigationRule(options) {
    return (host) => __awaiter(this, void 0, void 0, function* () {
        const project = yield getProject(host, options.project);
        const serverTarget = project.targets.get('server');
        if (!serverTarget || !serverTarget.options) {
            return;
        }
        const tsConfigPath = serverTarget.options.tsConfig;
        if (!tsConfigPath || typeof tsConfigPath !== 'string' || !host.exists(tsConfigPath)) {
            // No tsconfig path
            return;
        }
        const parseConfigHost = {
            useCaseSensitiveFileNames: ts.sys.useCaseSensitiveFileNames,
            readDirectory: ts.sys.readDirectory,
            fileExists: function (fileName) {
                return host.exists(fileName);
            },
            readFile: function (fileName) {
                return host.read(fileName).toString();
            },
        };
        const { config } = ts.readConfigFile(tsConfigPath, parseConfigHost.readFile);
        const parsed = ts.parseJsonConfigFileContent(config, parseConfigHost, dirname(normalize(tsConfigPath)));
        const tsHost = ts.createCompilerHost(parsed.options, true);
        // Strip BOM as otherwise TSC methods (Ex: getWidth) will return an offset,
        // which breaks the CLI UpdateRecorder.
        // See: https://github.com/angular/angular/pull/30719
        tsHost.readFile = function (fileName) {
            return host
                .read(fileName)
                .toString()
                .replace(/^\uFEFF/, '');
        };
        tsHost.directoryExists = function (directoryName) {
            // When the path is file getDir will throw.
            try {
                const dir = host.getDir(directoryName);
                return !!(dir.subdirs.length || dir.subfiles.length);
            }
            catch (_a) {
                return false;
            }
        };
        tsHost.fileExists = function (fileName) {
            return host.exists(fileName);
        };
        tsHost.realpath = function (path) {
            return path;
        };
        tsHost.getCurrentDirectory = function () {
            return host.root.path;
        };
        const program = ts.createProgram(parsed.fileNames, parsed.options, tsHost);
        const typeChecker = program.getTypeChecker();
        const sourceFiles = program
            .getSourceFiles()
            .filter((f) => !f.isDeclarationFile && !program.isSourceFileFromExternalLibrary(f));
        const printer = ts.createPrinter();
        const routerModule = 'RouterModule';
        const routerSource = '@angular/router';
        sourceFiles.forEach((sourceFile) => {
            const routerImport = findImport(sourceFile, routerSource, routerModule);
            if (!routerImport) {
                return;
            }
            let routerModuleNode;
            ts.forEachChild(sourceFile, function visitNode(node) {
                if (ts.isCallExpression(node) &&
                    ts.isPropertyAccessExpression(node.expression) &&
                    ts.isIdentifier(node.expression.expression) &&
                    node.expression.name.text === 'forRoot') {
                    const imp = getImportOfIdentifier(typeChecker, node.expression.expression);
                    if (imp && imp.name === routerModule && imp.importModule === routerSource) {
                        routerModuleNode = node;
                    }
                }
                ts.forEachChild(node, visitNode);
            });
            if (routerModuleNode) {
                const print = printer.printNode(ts.EmitHint.Unspecified, addInitialNavigation(routerModuleNode), sourceFile);
                const recorder = host.beginUpdate(sourceFile.fileName);
                recorder.remove(routerModuleNode.getStart(), routerModuleNode.getWidth());
                recorder.insertRight(routerModuleNode.getStart(), print);
                host.commitUpdate(recorder);
            }
        });
    });
}
function addDependencies(options) {
    return (host, context) => {
        if (!options.skipInstall) {
            context.addTask(new NodePackageInstallTask());
        }
        addPackageJsonDependency(host, {
            name: '@nguniversal/builders',
            type: NodeDependencyType.Dev,
            version: '^13.0.2',
        });
        addPackageJsonDependency(host, {
            type: NodeDependencyType.Default,
            name: '@nguniversal/express-engine',
            version: '^13.0.2',
        });
        addPackageJsonDependency(host, {
            type: NodeDependencyType.Default,
            name: 'express',
            version: '^4.15.2',
        });
        addPackageJsonDependency(host, {
            type: NodeDependencyType.Dev,
            name: '@types/express',
            version: '^4.17.0',
        });
        return host;
    };
}
function addServerFile(options) {
    return (host) => __awaiter(this, void 0, void 0, function* () {
        const project = yield getProject(host, options.project);
        const browserDistDirectory = yield getOutputPath(host, options.project, 'build');
        return mergeWith(apply(url('./files'), [
            template(Object.assign(Object.assign(Object.assign({}, strings), options), { stripTsExtension,
                browserDistDirectory })),
            move(project.root),
        ]));
    });
}
export default function (options) {
    return (host) => __awaiter(this, void 0, void 0, function* () {
        const project = yield getProject(host, options.project);
        const universalOptions = Object.assign(Object.assign({}, options), { skipInstall: true });
        delete universalOptions.serverFileName;
        delete universalOptions.serverPort;
        return chain([
            project.targets.has('server')
                ? noop()
                : externalSchematic('@schematics/angular', 'universal', universalOptions),
            addScriptsRule(options),
            updateServerTsConfigRule(options),
            updateWorkspaceConfigRule(options),
            routingInitialNavigationRule(options),
            addServerFile(options),
            addDependencies(options),
        ]);
    });
}
//# sourceMappingURL=data:application/json;base64,