"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIndexOutputFile = exports.shardArray = exports.getRoutes = void 0;
const fs = __importStar(require("fs"));
const guess_parser_1 = require("guess-parser");
const os = __importStar(require("os"));
const path = __importStar(require("path"));
/**
 * Returns the union of routes, the contents of routesFile if given,
 * and the static routes extracted if guessRoutes is set to true.
 */
async function getRoutes(options, tsConfigPath, context) {
    let routes = options.routes || [];
    const { logger, workspaceRoot } = context;
    if (options.routesFile) {
        const routesFilePath = path.join(workspaceRoot, options.routesFile);
        routes = routes.concat(fs
            .readFileSync(routesFilePath, 'utf8')
            .split(/\r?\n/)
            .filter((v) => !!v));
    }
    if (options.guessRoutes && tsConfigPath) {
        try {
            routes = routes.concat((0, guess_parser_1.parseAngularRoutes)(path.join(workspaceRoot, tsConfigPath))
                .map((routeObj) => routeObj.path)
                .filter((route) => !route.includes('*') && !route.includes(':')));
        }
        catch (e) {
            logger.error('Unable to extract routes from application.', e);
        }
    }
    routes = routes.map((r) => (r === '' ? '/' : r));
    return [...new Set(routes)];
}
exports.getRoutes = getRoutes;
/**
 * Evenly shards items in an array.
 * e.g. shardArray([1, 2, 3, 4], 2) => [[1, 2], [3, 4]]
 */
function shardArray(items, maxNoOfShards = os.cpus().length - 1 || 1) {
    const shardedArray = [];
    const numShards = Math.min(maxNoOfShards, items.length);
    for (let i = 0; i < numShards; i++) {
        shardedArray.push(items.filter((_, index) => index % numShards === i));
    }
    return shardedArray;
}
exports.shardArray = shardArray;
/**
 * Returns the name of the index file outputted by the browser builder.
 */
function getIndexOutputFile(options) {
    if (typeof options.index === 'string') {
        return path.basename(options.index);
    }
    else {
        return options.index.output || 'index.html';
    }
}
exports.getIndexOutputFile = getIndexOutputFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9tb2R1bGVzL2J1aWxkZXJzL3NyYy9wcmVyZW5kZXIvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7R0FNRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUlILHVDQUF5QjtBQUN6QiwrQ0FBa0Q7QUFDbEQsdUNBQXlCO0FBQ3pCLDJDQUE2QjtBQUc3Qjs7O0dBR0c7QUFDSSxLQUFLLFVBQVUsU0FBUyxDQUM3QixPQUFnQyxFQUNoQyxZQUFnQyxFQUNoQyxPQUF1QjtJQUV2QixJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQztJQUNsQyxNQUFNLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxHQUFHLE9BQU8sQ0FBQztJQUMxQyxJQUFJLE9BQU8sQ0FBQyxVQUFVLEVBQUU7UUFDdEIsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUNwQixFQUFFO2FBQ0MsWUFBWSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUM7YUFDcEMsS0FBSyxDQUFDLE9BQU8sQ0FBQzthQUNkLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUN0QixDQUFDO0tBQ0g7SUFFRCxJQUFJLE9BQU8sQ0FBQyxXQUFXLElBQUksWUFBWSxFQUFFO1FBQ3ZDLElBQUk7WUFDRixNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FDcEIsSUFBQSxpQ0FBa0IsRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQztpQkFDdkQsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO2lCQUNoQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDbkUsQ0FBQztTQUNIO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixNQUFNLENBQUMsS0FBSyxDQUFDLDRDQUE0QyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQy9EO0tBQ0Y7SUFFRCxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFakQsT0FBTyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUM5QixDQUFDO0FBaENELDhCQWdDQztBQUVEOzs7R0FHRztBQUNILFNBQWdCLFVBQVUsQ0FBSSxLQUFVLEVBQUUsYUFBYSxHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUM7SUFDakYsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDO0lBQ3hCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2xDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssR0FBRyxTQUFTLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN4RTtJQUVELE9BQU8sWUFBWSxDQUFDO0FBQ3RCLENBQUM7QUFSRCxnQ0FRQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0Isa0JBQWtCLENBQUMsT0FBOEI7SUFDL0QsSUFBSSxPQUFPLE9BQU8sQ0FBQyxLQUFLLEtBQUssUUFBUSxFQUFFO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDckM7U0FBTTtRQUNMLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksWUFBWSxDQUFDO0tBQzdDO0FBQ0gsQ0FBQztBQU5ELGdEQU1DIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7IEJ1aWxkZXJDb250ZXh0IH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2FyY2hpdGVjdCc7XG5pbXBvcnQgeyBCcm93c2VyQnVpbGRlck9wdGlvbnMgfSBmcm9tICdAYW5ndWxhci1kZXZraXQvYnVpbGQtYW5ndWxhcic7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgeyBwYXJzZUFuZ3VsYXJSb3V0ZXMgfSBmcm9tICdndWVzcy1wYXJzZXInO1xuaW1wb3J0ICogYXMgb3MgZnJvbSAnb3MnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IFByZXJlbmRlckJ1aWxkZXJPcHRpb25zIH0gZnJvbSAnLi9tb2RlbHMnO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHVuaW9uIG9mIHJvdXRlcywgdGhlIGNvbnRlbnRzIG9mIHJvdXRlc0ZpbGUgaWYgZ2l2ZW4sXG4gKiBhbmQgdGhlIHN0YXRpYyByb3V0ZXMgZXh0cmFjdGVkIGlmIGd1ZXNzUm91dGVzIGlzIHNldCB0byB0cnVlLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Um91dGVzKFxuICBvcHRpb25zOiBQcmVyZW5kZXJCdWlsZGVyT3B0aW9ucyxcbiAgdHNDb25maWdQYXRoOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gIGNvbnRleHQ6IEJ1aWxkZXJDb250ZXh0LFxuKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICBsZXQgcm91dGVzID0gb3B0aW9ucy5yb3V0ZXMgfHwgW107XG4gIGNvbnN0IHsgbG9nZ2VyLCB3b3Jrc3BhY2VSb290IH0gPSBjb250ZXh0O1xuICBpZiAob3B0aW9ucy5yb3V0ZXNGaWxlKSB7XG4gICAgY29uc3Qgcm91dGVzRmlsZVBhdGggPSBwYXRoLmpvaW4od29ya3NwYWNlUm9vdCwgb3B0aW9ucy5yb3V0ZXNGaWxlKTtcbiAgICByb3V0ZXMgPSByb3V0ZXMuY29uY2F0KFxuICAgICAgZnNcbiAgICAgICAgLnJlYWRGaWxlU3luYyhyb3V0ZXNGaWxlUGF0aCwgJ3V0ZjgnKVxuICAgICAgICAuc3BsaXQoL1xccj9cXG4vKVxuICAgICAgICAuZmlsdGVyKCh2KSA9PiAhIXYpLFxuICAgICk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5ndWVzc1JvdXRlcyAmJiB0c0NvbmZpZ1BhdGgpIHtcbiAgICB0cnkge1xuICAgICAgcm91dGVzID0gcm91dGVzLmNvbmNhdChcbiAgICAgICAgcGFyc2VBbmd1bGFyUm91dGVzKHBhdGguam9pbih3b3Jrc3BhY2VSb290LCB0c0NvbmZpZ1BhdGgpKVxuICAgICAgICAgIC5tYXAoKHJvdXRlT2JqKSA9PiByb3V0ZU9iai5wYXRoKVxuICAgICAgICAgIC5maWx0ZXIoKHJvdXRlKSA9PiAhcm91dGUuaW5jbHVkZXMoJyonKSAmJiAhcm91dGUuaW5jbHVkZXMoJzonKSksXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignVW5hYmxlIHRvIGV4dHJhY3Qgcm91dGVzIGZyb20gYXBwbGljYXRpb24uJywgZSk7XG4gICAgfVxuICB9XG5cbiAgcm91dGVzID0gcm91dGVzLm1hcCgocikgPT4gKHIgPT09ICcnID8gJy8nIDogcikpO1xuXG4gIHJldHVybiBbLi4ubmV3IFNldChyb3V0ZXMpXTtcbn1cblxuLyoqXG4gKiBFdmVubHkgc2hhcmRzIGl0ZW1zIGluIGFuIGFycmF5LlxuICogZS5nLiBzaGFyZEFycmF5KFsxLCAyLCAzLCA0XSwgMikgPT4gW1sxLCAyXSwgWzMsIDRdXVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2hhcmRBcnJheTxUPihpdGVtczogVFtdLCBtYXhOb09mU2hhcmRzID0gb3MuY3B1cygpLmxlbmd0aCAtIDEgfHwgMSk6IFRbXVtdIHtcbiAgY29uc3Qgc2hhcmRlZEFycmF5ID0gW107XG4gIGNvbnN0IG51bVNoYXJkcyA9IE1hdGgubWluKG1heE5vT2ZTaGFyZHMsIGl0ZW1zLmxlbmd0aCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtU2hhcmRzOyBpKyspIHtcbiAgICBzaGFyZGVkQXJyYXkucHVzaChpdGVtcy5maWx0ZXIoKF8sIGluZGV4KSA9PiBpbmRleCAlIG51bVNoYXJkcyA9PT0gaSkpO1xuICB9XG5cbiAgcmV0dXJuIHNoYXJkZWRBcnJheTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBuYW1lIG9mIHRoZSBpbmRleCBmaWxlIG91dHB1dHRlZCBieSB0aGUgYnJvd3NlciBidWlsZGVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5kZXhPdXRwdXRGaWxlKG9wdGlvbnM6IEJyb3dzZXJCdWlsZGVyT3B0aW9ucyk6IHN0cmluZyB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbmRleCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGF0aC5iYXNlbmFtZShvcHRpb25zLmluZGV4KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gb3B0aW9ucy5pbmRleC5vdXRwdXQgfHwgJ2luZGV4Lmh0bWwnO1xuICB9XG59XG4iXX0=