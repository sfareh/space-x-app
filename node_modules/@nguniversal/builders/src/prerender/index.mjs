/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { createBuilder, targetFromTargetString, } from '@angular-devkit/architect';
import { normalizeOptimization } from '@angular-devkit/build-angular/src/utils/normalize-optimization';
import { augmentAppWithServiceWorker } from '@angular-devkit/build-angular/src/utils/service-worker';
import { normalize, resolve as resolvePath } from '@angular-devkit/core';
import * as fs from 'fs';
import ora from 'ora';
import * as path from 'path';
import Piscina from 'piscina';
import { promisify } from 'util';
import { getIndexOutputFile, getRoutes } from './utils';
export const readFile = promisify(fs.readFile);
/**
 * Schedules the server and browser builds and returns their results if both builds are successful.
 */
function _scheduleBuilds(options, context) {
    return __awaiter(this, void 0, void 0, function* () {
        const browserTarget = targetFromTargetString(options.browserTarget);
        const serverTarget = targetFromTargetString(options.serverTarget);
        const browserTargetRun = yield context.scheduleTarget(browserTarget, {
            watch: false,
            serviceWorker: false,
            // todo: handle service worker augmentation
        });
        const serverTargetRun = yield context.scheduleTarget(serverTarget, {
            watch: false,
        });
        try {
            const [browserResult, serverResult] = yield Promise.all([
                browserTargetRun.result,
                serverTargetRun.result,
            ]);
            const success = browserResult.success && serverResult.success && browserResult.baseOutputPath !== undefined;
            const error = browserResult.error || serverResult.error;
            return { success, error, browserResult, serverResult };
        }
        catch (e) {
            return { success: false, error: e.message };
        }
        finally {
            yield Promise.all([browserTargetRun.stop(), serverTargetRun.stop()]);
        }
    });
}
/**
 * Renders each route and writes them to
 * <route>/index.html for each output path in the browser result.
 */
function _renderUniversal(routes, context, browserResult, serverResult, browserOptions, numProcesses) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const projectName = context.target && context.target.project;
        if (!projectName) {
            throw new Error('The builder requires a target.');
        }
        const root = normalize(context.workspaceRoot);
        const projectMetadata = yield context.getProjectMetadata(projectName);
        const projectRoot = resolvePath(root, normalize(projectMetadata.root || ''));
        // Users can specify a different base html file e.g. "src/home.html"
        const indexFile = getIndexOutputFile(browserOptions);
        const { styles: normalizedStylesOptimization } = normalizeOptimization(browserOptions.optimization);
        const { baseOutputPath = '' } = serverResult;
        const worker = new Piscina({
            filename: path.join(__dirname, 'worker.js'),
            name: 'render',
            maxThreads: numProcesses,
        });
        try {
            // We need to render the routes for each locale from the browser output.
            for (const outputPath of browserResult.outputPaths) {
                const localeDirectory = path.relative(browserResult.baseOutputPath, outputPath);
                const serverBundlePath = path.join(baseOutputPath, localeDirectory, 'main.js');
                if (!fs.existsSync(serverBundlePath)) {
                    throw new Error(`Could not find the main bundle: ${serverBundlePath}`);
                }
                const spinner = ora(`Prerendering ${routes.length} route(s) to ${outputPath}...`).start();
                try {
                    const results = (yield Promise.all(routes.map((route) => {
                        const options = {
                            indexFile,
                            deployUrl: browserOptions.deployUrl || '',
                            inlineCriticalCss: !!normalizedStylesOptimization.inlineCritical,
                            minifyCss: !!normalizedStylesOptimization.minify,
                            outputPath,
                            route,
                            serverBundlePath,
                        };
                        return worker.run(options, { name: 'render' });
                    })));
                    let numErrors = 0;
                    for (const { errors, warnings } of results) {
                        spinner.stop();
                        errors === null || errors === void 0 ? void 0 : errors.forEach((e) => context.logger.error(e));
                        warnings === null || warnings === void 0 ? void 0 : warnings.forEach((e) => context.logger.warn(e));
                        spinner.start();
                        numErrors += (_a = errors === null || errors === void 0 ? void 0 : errors.length) !== null && _a !== void 0 ? _a : 0;
                    }
                    if (numErrors > 0) {
                        throw Error(`Rendering failed with ${numErrors} worker errors.`);
                    }
                }
                catch (error) {
                    spinner.fail(`Prerendering routes to ${outputPath} failed.`);
                    return { success: false, error: error.message };
                }
                spinner.succeed(`Prerendering routes to ${outputPath} complete.`);
                if (browserOptions.serviceWorker) {
                    spinner.start('Generating service worker...');
                    try {
                        yield augmentAppWithServiceWorker(projectRoot, normalize(outputPath), browserOptions.baseHref || '/', browserOptions.ngswConfigPath);
                    }
                    catch (error) {
                        spinner.fail('Service worker generation failed.');
                        return { success: false, error: error.message };
                    }
                    spinner.succeed('Service worker generation complete.');
                }
            }
        }
        finally {
            void worker.destroy();
        }
        return browserResult;
    });
}
/**
 * Builds the browser and server, then renders each route in options.routes
 * and writes them to prerender/<route>/index.html for each output path in
 * the browser result.
 */
export function execute(options, context) {
    return __awaiter(this, void 0, void 0, function* () {
        const browserTarget = targetFromTargetString(options.browserTarget);
        const browserOptions = (yield context.getTargetOptions(browserTarget));
        const tsConfigPath = typeof browserOptions.tsConfig === 'string' ? browserOptions.tsConfig : undefined;
        const routes = yield getRoutes(options, tsConfigPath, context);
        if (!routes.length) {
            throw new Error(`Could not find any routes to prerender.`);
        }
        const result = yield _scheduleBuilds(options, context);
        const { success, error, browserResult, serverResult } = result;
        if (!success || !browserResult || !serverResult) {
            return { success, error };
        }
        return _renderUniversal(routes, context, browserResult, serverResult, browserOptions, options.numProcesses);
    });
}
export default createBuilder(execute);
//# sourceMappingURL=data:application/json;base64,